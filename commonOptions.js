const bot = require("./bot");

module.exports = {
  async startBot(chatId) {
    const welcomeText =
      "–ü—Ä–∏–≤–µ—Ç! üëã \n\n –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–≥–æ—Å—è –Ω–∞ —Ö–∞–∫–∏–Ω–≥–µ, –∏–Ω—Ñ–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∑–ª–æ–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. \n\n üîí –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥—ã –∞—Ç–∞–∫ –∏ –∑–∞—â–∏—Ç—ã, —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π. –Ø –Ω–µ –ø–æ–æ—â—Ä—è—é –ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–µ—Ç–∏. –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n üîê –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —Ö–∞–∫–∏–Ω–≥ –∏ –≤–∑–ª–æ–º –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∏—Å—Ç–µ–º—ã ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –í–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —ç—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö. –û–±—Ä–∞—â–∞–π—Å—è —Å–æ —Å–≤–æ–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –±—É–¥–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ! üíªüõ°Ô∏è";

    await bot.sendPhoto(chatId, "./assets/welcome.jpg", { caption: welcomeText });
  },

  async menuBot(chatId, stateStorage) {
    const keyboard = {
      inline_keyboard: [[{ text: "üõ† –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã üõ†", callback_data: "show_tools" }]],
    };

    const messageOptions = {
      reply_markup: JSON.stringify(keyboard),
    };

    const sentMessage = await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", messageOptions);

    


    // Listen for callback queries
    bot.on("callback_query", async (query) => {
      // Handle the callback query based on the data received
      if (query.data === "show_tools") {
        // Edit the current message with the new message after clicking the "show_tools" button
        const toolsText = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"; // Your new message here

        const keyboard = {
          inline_keyboard: [
            [{ text: "–°–∞–π—Ç—ã", callback_data: "sites" }],
            [{ text: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 2", callback_data: "tool_2" }],
            [{ text: "–ù–∞–∑–∞–¥", callback_data: "back" }],

            // Add more buttons as needed
          ],
        };

        const messageOptions = {
          reply_markup: JSON.stringify(keyboard),
        };

        await bot.editMessageText(toolsText, {
          chat_id: chatId,
          message_id: sentMessage.message_id,
          reply_markup: messageOptions.reply_markup,
        });
      }

      if (query.data === "sites") {
        const toolsText  = "–°–∞–π—Ç—ã"; // Your new message here

        const keyboard = {
          inline_keyboard: [
            [{ text: "Whois", callback_data: "whois", width: 3 }],
            // Add more buttons as needed
          ],
        };

        const messageOptions = {
          reply_markup: JSON.stringify(keyboard),
        };

        await bot.editMessageText(toolsText, {
          chat_id: chatId,
          message_id: sentMessage.message_id,
          reply_markup: messageOptions.reply_markup,
        });
      }

      if (query.data === "whois") {
        
        const whoisDescription = "Whois - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –¥–æ–º–µ–Ω–∞, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è.\n\n –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ª–∏–±–æ –µ–≥–æ IP."
            // Save the current state to indicate that we are waiting for the user's response
        await bot.sendMessage(chatId, whoisDescription);
        
        stateStorage.save("waiting_for_user_input");
     }
    
    });
   
   
  },
};
